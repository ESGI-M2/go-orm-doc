"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3304],{5811:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library/examples","title":"Exemples d\'Utilisation Avanc\xe9e","description":"Ce guide pr\xe9sente des exemples avanc\xe9s d\'utilisation de GO ORM pour des cas concrets.","source":"@site/docs/library/examples.md","sourceDirName":"library","slug":"/library/examples","permalink":"/docs/library/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/ESGI-M2/GO/tree/main/docs/docs/library/examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Pattern Builder (SimpleORM)","permalink":"/docs/library/builder-pattern"},"next":{"title":"Architecture g\xe9n\xe9rale","permalink":"/docs/technical/architecture"}}');var s=r(4848),o=r(8453);const a={},i="Exemples d'Utilisation Avanc\xe9e",l={},c=[{value:"Relations",id:"relations",level:2},{value:"One-to-Many",id:"one-to-many",level:3},{value:"Many-to-Many",id:"many-to-many",level:3},{value:"Soft Delete",id:"soft-delete",level:2},{value:"Hooks",id:"hooks",level:2},{value:"Requ\xeates Complexes",id:"requ\xeates-complexes",level:2},{value:"Sous-requ\xeates",id:"sous-requ\xeates",level:3},{value:"Agr\xe9gations",id:"agr\xe9gations",level:3},{value:"Transactions Avanc\xe9es",id:"transactions-avanc\xe9es",level:2},{value:"Points de Sauvegarde",id:"points-de-sauvegarde",level:3},{value:"Transactions avec Timeout",id:"transactions-avec-timeout",level:3},{value:"Cache",id:"cache",level:2},{value:"Tests",id:"tests",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"exemples-dutilisation-avanc\xe9e",children:"Exemples d'Utilisation Avanc\xe9e"})}),"\n",(0,s.jsx)(n.p,{children:"Ce guide pr\xe9sente des exemples avanc\xe9s d'utilisation de GO ORM pour des cas concrets."}),"\n",(0,s.jsx)(n.h2,{id:"relations",children:"Relations"}),"\n",(0,s.jsx)(n.h3,{id:"one-to-many",children:"One-to-Many"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID    uint   `orm:"primary_key;auto_increment"`\n    Name  string `orm:"size:255;not_null"`\n    Posts []Post `orm:"has_many"`\n}\n\ntype Post struct {\n    ID     uint   `orm:"primary_key;auto_increment"`\n    Title  string `orm:"size:255;not_null"`\n    UserID uint   `orm:"not_null"`\n    User   *User  `orm:"belongs_to"`\n}\n\n// Cr\xe9er un utilisateur avec des posts\nuser := &User{\n    Name: "Alice",\n    Posts: []Post{\n        {Title: "Premier post"},\n        {Title: "Second post"},\n    },\n}\n\nrepo := orm.Repository(&User{})\nerr := repo.Save(user) // Sauvegarde en cascade\n\n// Charger les posts d\'un utilisateur\nuser, err := repo.Find(1)\nposts := user.Posts // Chargement automatique\n'})}),"\n",(0,s.jsx)(n.h3,{id:"many-to-many",children:"Many-to-Many"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Tag struct {\n    ID    uint    `orm:"primary_key;auto_increment"`\n    Name  string  `orm:"size:255;not_null;unique"`\n    Posts []Post  `orm:"many_to_many"`\n}\n\ntype Post struct {\n    ID   uint   `orm:"primary_key;auto_increment"`\n    Tags []Tag  `orm:"many_to_many"`\n}\n\n// Ajouter des tags \xe0 un post\npost := &Post{}\nrepo := orm.Repository(&Post{})\nrepo.Find(1)\n\ntagRepo := orm.Repository(&Tag{})\ntag1, _ := tagRepo.FindOneBy(map[string]interface{}{"name": "golang"})\ntag2, _ := tagRepo.FindOneBy(map[string]interface{}{"name": "orm"})\n\npost.Tags = append(post.Tags, *tag1, *tag2)\nrepo.Update(post)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"soft-delete",children:"Soft Delete"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Document struct {\n    ID        uint       `orm:"primary_key;auto_increment"`\n    Title     string     `orm:"size:255;not_null"`\n    DeletedAt *time.Time `orm:"soft_delete"`\n}\n\nrepo := orm.Repository(&Document{})\n\n// Suppression douce\ndoc := &Document{Title: "Test"}\nrepo.Save(doc)\nrepo.Delete(doc) // Marque comme supprim\xe9\n\n// Requ\xeates excluent automatiquement les documents supprim\xe9s\ndocs, _ := repo.FindAll()\n\n// Inclure les documents supprim\xe9s\ndocs, _ := orm.Query(&Document{}).\n    WithTrashed().\n    Find()\n\n// Restaurer un document\ndoc.DeletedAt = nil\nrepo.Update(doc)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Order struct {\n    ID     uint    `orm:"primary_key;auto_increment"`\n    Total  float64 `orm:"not_null"`\n    Status string  `orm:"size:50;not_null"`\n}\n\nfunc (o *Order) BeforeSave() error {\n    if o.Total < 0 {\n        return errors.New("le total ne peut pas \xeatre n\xe9gatif")\n    }\n    return nil\n}\n\nfunc (o *Order) AfterSave() error {\n    // Envoyer une notification\n    return notifyCustomer(o)\n}\n\nfunc (o *Order) BeforeDelete() error {\n    if o.Status == "completed" {\n        return errors.New("impossible de supprimer une commande compl\xe9t\xe9e")\n    }\n    return nil\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"requ\xeates-complexes",children:"Requ\xeates Complexes"}),"\n",(0,s.jsx)(n.h3,{id:"sous-requ\xeates",children:"Sous-requ\xeates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Trouver les utilisateurs avec des posts populaires\nusers, err := orm.Query(&User{}).\n    WhereIn("id",\n        orm.Query(&Post{}).\n            Select("user_id").\n            Where("likes", ">", 100).\n            GetSQL(),\n    ).Find()\n\n// Utilisateurs avec leur nombre de posts\nusers, err := orm.Query(&User{}).\n    Select("users.*, (SELECT COUNT(*) FROM posts WHERE user_id = users.id) as post_count").\n    Having("post_count > ?", 5).\n    Find()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"agr\xe9gations",children:"Agr\xe9gations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Statistiques des commandes par jour\nstats, err := orm.Query(&Order{}).\n    Select(\n        "DATE(created_at) as date",\n        "COUNT(*) as total_orders",\n        "SUM(total) as daily_revenue",\n        "AVG(total) as average_order",\n    ).\n    GroupBy("date").\n    Having("daily_revenue > ?", 1000).\n    OrderBy("date", "DESC").\n    Find()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"transactions-avanc\xe9es",children:"Transactions Avanc\xe9es"}),"\n",(0,s.jsx)(n.h3,{id:"points-de-sauvegarde",children:"Points de Sauvegarde"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'err := orm.Transaction(func(tx ORM) error {\n    userRepo := tx.Repository(&User{})\n    orderRepo := tx.Repository(&Order{})\n\n    // Premi\xe8re \xe9tape\n    if err := tx.SavePoint("users"); err != nil {\n        return err\n    }\n    \n    for _, userData := range usersData {\n        if err := userRepo.Save(userData); err != nil {\n            tx.RollbackTo("users")\n            return err\n        }\n    }\n\n    // Deuxi\xe8me \xe9tape\n    if err := tx.SavePoint("orders"); err != nil {\n        return err\n    }\n    \n    for _, orderData := range ordersData {\n        if err := orderRepo.Save(orderData); err != nil {\n            tx.RollbackTo("orders")\n            return err\n        }\n    }\n\n    return nil\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"transactions-avec-timeout",children:"Transactions avec Timeout"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nerr := orm.TransactionWithContext(ctx, func(tx ORM) error {\n    // La transaction est annul\xe9e si elle d\xe9passe 5 secondes\n    return processLargeDataset(tx)\n})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cache",children:"Cache"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type CachedRepository struct {\n    orm.Repository\n    cache Cache\n}\n\nfunc (r *CachedRepository) Find(id interface{}) (interface{}, error) {\n    key := fmt.Sprintf("user:%v", id)\n    \n    // V\xe9rifier le cache\n    if cached, found := r.cache.Get(key); found {\n        return cached, nil\n    }\n    \n    // Charger depuis la base\n    user, err := r.Repository.Find(id)\n    if err != nil {\n        return nil, err\n    }\n    \n    // Mettre en cache\n    r.cache.Set(key, user, 1*time.Hour)\n    return user, nil\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func TestUserRepository(t *testing.T) {\n    // Configuration de test\n    cfg := builder.NewConfigBuilder().\n        WithDialect(factory.SQLite).\n        WithDatabase(":memory:").\n        Build()\n\n    orm := builder.NewSimpleORM().\n        WithConfigBuilder(cfg).\n        RegisterModel(&User{})\n\n    if err := orm.Connect(); err != nil {\n        t.Fatal(err)\n    }\n    defer orm.Close()\n\n    // Migration\n    if err := orm.GetORM().CreateTable(&User{}); err != nil {\n        t.Fatal(err)\n    }\n\n    // Test de cr\xe9ation\n    repo := orm.GetORM().Repository(&User{})\n    user := &User{Name: "Test User"}\n    \n    if err := repo.Save(user); err != nil {\n        t.Errorf("Failed to create user: %v", err)\n    }\n    \n    if user.ID == 0 {\n        t.Error("Expected user ID to be set")\n    }\n\n    // Test de lecture\n    found, err := repo.Find(user.ID)\n    if err != nil {\n        t.Errorf("Failed to find user: %v", err)\n    }\n    \n    if found.(*User).Name != user.Name {\n        t.Errorf("Expected name %s, got %s", user.Name, found.(*User).Name)\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);