"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2814],{1953:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"quick-start","title":"D\xe9marrage Rapide","description":"Ce guide pr\xe9sente les op\xe9rations CRUD de base avec GO ORM.","source":"@site/docs/quick-start.md","sourceDirName":".","slug":"/quick-start","permalink":"/go-orm-doc/docs/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/ESGI-M2/GO/tree/main/docs/docs/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/go-orm-doc/docs/intro"},"next":{"title":"Mod\xe8les","permalink":"/go-orm-doc/docs/library/models"}}');var i=n(4848),l=n(8453);const a={},t="D\xe9marrage Rapide",o={},d=[{value:"Op\xe9rations CRUD",id:"op\xe9rations-crud",level:2},{value:"Create",id:"create",level:3},{value:"Read",id:"read",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Query Builder",id:"query-builder",level:2},{value:"Requ\xeates Simples",id:"requ\xeates-simples",level:3},{value:"Jointures",id:"jointures",level:3},{value:"Transactions",id:"transactions",level:2},{value:"Migrations",id:"migrations",level:2},{value:"Prochaines \xc9tapes",id:"prochaines-\xe9tapes",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"d\xe9marrage-rapide",children:"D\xe9marrage Rapide"})}),"\n",(0,i.jsx)(r.p,{children:"Ce guide pr\xe9sente les op\xe9rations CRUD de base avec GO ORM."}),"\n",(0,i.jsx)(r.h2,{id:"op\xe9rations-crud",children:"Op\xe9rations CRUD"}),"\n",(0,i.jsx)(r.h3,{id:"create",children:"Create"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'repo := orm.GetORM().Repository(&User{})\n\nuser := &User{\n    Name:      "Alice",\n    Email:     "alice@example.com",\n    CreatedAt: time.Now(),\n}\n\nif err := repo.Save(user); err != nil {\n    log.Fatal(err)\n}\nfmt.Printf("User created with ID: %d\\n", user.ID)\n'})}),"\n",(0,i.jsx)(r.h3,{id:"read",children:"Read"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'// Par ID\nuser, err := repo.Find(1)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Tous les utilisateurs\nusers, err := repo.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// Avec crit\xe8res\ncriteria := map[string]interface{}{\n    "name": "Alice",\n}\nusers, err := repo.FindBy(criteria)\nif err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"update",children:"Update"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'user.Name = "Alice Smith"\nif err := repo.Update(user); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"delete",children:"Delete"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"if err := repo.Delete(user); err != nil {\n    log.Fatal(err)\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"query-builder",children:"Query Builder"}),"\n",(0,i.jsx)(r.h3,{id:"requ\xeates-simples",children:"Requ\xeates Simples"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'// S\xe9lection avec conditions\nusers, err := orm.Query(&User{}).\n    Select("name", "email").\n    Where("name", "LIKE", "%Alice%").\n    OrderBy("created_at", "DESC").\n    Limit(10).\n    Find()\n\n// Compter\ncount, err := orm.Query(&User{}).\n    Where("name", "!=", "").\n    Count()\n\n// V\xe9rifier l\'existence\nexists, err := orm.Query(&User{}).\n    Where("email", "=", "alice@example.com").\n    Exists()\n'})}),"\n",(0,i.jsx)(r.h3,{id:"jointures",children:"Jointures"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'type Post struct {\n    ID     int    `orm:"pk,auto"`\n    Title  string `orm:"column:title"`\n    UserID int    `orm:"column:user_id"`\n}\n\nresults, err := orm.Query(&User{}).\n    Select("users.*, posts.title").\n    Join("posts", "users.id = posts.user_id").\n    Where("posts.title", "LIKE", "%Go%").\n    Find()\n'})}),"\n",(0,i.jsx)(r.h2,{id:"transactions",children:"Transactions"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'err := orm.GetORM().Transaction(func(tx interfaces.ORM) error {\n    repo := tx.Repository(&User{})\n    \n    // Cr\xe9er un utilisateur\n    user := &User{Name: "Bob", Email: "bob@example.com"}\n    if err := repo.Save(user); err != nil {\n        return err // rollback\n    }\n    \n    // Cr\xe9er un post\n    postRepo := tx.Repository(&Post{})\n    post := &Post{Title: "Hello", UserID: user.ID}\n    if err := postRepo.Save(post); err != nil {\n        return err // rollback\n    }\n    \n    return nil // commit\n})\n\nif err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"migrations",children:"Migrations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"// Cr\xe9er une table\nif err := orm.GetORM().CreateTable(&User{}); err != nil {\n    log.Fatal(err)\n}\n\n// Supprimer une table\nif err := orm.GetORM().DropTable(&User{}); err != nil {\n    log.Fatal(err)\n}\n\n// Migration automatique de tous les mod\xe8les\nif err := orm.GetORM().Migrate(); err != nil {\n    log.Fatal(err)\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"prochaines-\xe9tapes",children:"Prochaines \xc9tapes"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Consultez la ",(0,i.jsx)(r.a,{href:"/go-orm-doc/docs/api-reference",children:"R\xe9f\xe9rence API"})," pour une documentation compl\xe8te"]}),"\n",(0,i.jsxs)(r.li,{children:["Explorez les ",(0,i.jsx)(r.a,{href:"/go-orm-doc/docs/library/examples",children:"Exemples"})," pour des cas d'utilisation plus avanc\xe9s"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);