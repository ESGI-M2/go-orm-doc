"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7443],{3588:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-reference","title":"R\xe9f\xe9rence API","description":"Cette page documente l\'API compl\xe8te de l\'ORM, avec tous les types, interfaces et m\xe9thodes disponibles.","source":"@site/docs/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/go-orm-doc/docs/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/ESGI-M2/GO/tree/main/docs/docs/api-reference.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"docs","previous":{"title":"Transactions internes","permalink":"/go-orm-doc/docs/technical/transaction"}}');var t=r(4848),o=r(8453);const l={sidebar_position:12},s="R\xe9f\xe9rence API",a={},d=[{value:"Configuration",id:"configuration",level:2},{value:"<code>ConnectionConfig</code>",id:"connectionconfig",level:3},{value:"<code>ConfigBuilder</code>",id:"configbuilder",level:3},{value:"ORM Principal",id:"orm-principal",level:2},{value:"<code>SimpleORM</code>",id:"simpleorm",level:3},{value:"<code>ORM</code>",id:"orm",level:3},{value:"Repository",id:"repository",level:2},{value:"<code>Repository</code>",id:"repository-1",level:3},{value:"Query Builder",id:"query-builder",level:2},{value:"<code>QueryBuilder</code>",id:"querybuilder",level:3},{value:"Dialectes",id:"dialectes",level:2},{value:"<code>Dialect</code>",id:"dialect",level:3},{value:"M\xe9tadonn\xe9es",id:"m\xe9tadonn\xe9es",level:2},{value:"<code>ModelMetadata</code>",id:"modelmetadata",level:3},{value:"<code>Column</code>",id:"column",level:3},{value:"<code>ForeignKey</code>",id:"foreignkey",level:3},{value:"Transactions",id:"transactions",level:2},{value:"<code>Transaction</code>",id:"transaction",level:3},{value:"Exemples d&#39;Utilisation",id:"exemples-dutilisation",level:2},{value:"Configuration et Connexion",id:"configuration-et-connexion",level:3},{value:"Op\xe9rations CRUD",id:"op\xe9rations-crud",level:3},{value:"Query Builder",id:"query-builder-1",level:3},{value:"Transactions",id:"transactions-1",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"r\xe9f\xe9rence-api",children:"R\xe9f\xe9rence API"})}),"\n",(0,t.jsx)(n.p,{children:"Cette page documente l'API compl\xe8te de l'ORM, avec tous les types, interfaces et m\xe9thodes disponibles."}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"connectionconfig",children:(0,t.jsx)(n.code,{children:"ConnectionConfig"})}),"\n",(0,t.jsx)(n.p,{children:"Configuration de la connexion \xe0 la base de donn\xe9es."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type ConnectionConfig struct {\n    Host     string // H\xf4te de la base de donn\xe9es\n    Port     int    // Port de la base de donn\xe9es\n    Username string // Nom d'utilisateur\n    Password string // Mot de passe\n    Database string // Nom de la base de donn\xe9es\n    SSLMode  string // Mode SSL (disable, require, etc.)\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configbuilder",children:(0,t.jsx)(n.code,{children:"ConfigBuilder"})}),"\n",(0,t.jsx)(n.p,{children:"Builder pour cr\xe9er une configuration."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type ConfigBuilder interface {\n    WithDialect(dialectType interface{}) *ConfigBuilder\n    WithHost(host string) *ConfigBuilder\n    WithPort(port int) *ConfigBuilder\n    WithUsername(username string) *ConfigBuilder\n    WithPassword(password string) *ConfigBuilder\n    WithDatabase(database string) *ConfigBuilder\n    WithSSLMode(sslMode string) *ConfigBuilder\n    WithEnvFile(path string) *ConfigBuilder\n    FromEnv() *ConfigBuilder\n    WithAutoCreateDatabase() *ConfigBuilder\n    Build() (ConnectionConfig, error)\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"orm-principal",children:"ORM Principal"}),"\n",(0,t.jsx)(n.h3,{id:"simpleorm",children:(0,t.jsx)(n.code,{children:"SimpleORM"})}),"\n",(0,t.jsx)(n.p,{children:"Point d'entr\xe9e principal de l'ORM."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type SimpleORM interface {\n    WithDialect(dialectType interface{}) *SimpleORM\n    WithMySQL() *SimpleORM\n    WithPostgreSQL() *SimpleORM\n    WithConfig(config ConnectionConfig) *SimpleORM\n    WithConfigBuilder(builder *ConfigBuilder) *SimpleORM\n    RegisterModel(model interface{}) *SimpleORM\n    RegisterModels(models ...interface{}) *SimpleORM\n    Connect() error\n    Close() error\n    IsConnected() bool\n    GetORM() ORM\n    Query(model interface{}) QueryBuilder\n    Repository(model interface{}) Repository\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"orm",children:(0,t.jsx)(n.code,{children:"ORM"})}),"\n",(0,t.jsx)(n.p,{children:"Interface principale de l'ORM."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type ORM interface {\n    // Gestion de la connexion\n    Connect(config ConnectionConfig) error\n    Close() error\n    IsConnected() bool\n    GetDialect() Dialect\n    \n    // Gestion des mod\xe8les\n    RegisterModel(model interface{}) error\n    GetMetadata(model interface{}) (*ModelMetadata, error)\n    \n    // Requ\xeates et op\xe9rations\n    Query(model interface{}) QueryBuilder\n    Raw(sql string, args ...interface{}) QueryBuilder\n    Repository(model interface{}) Repository\n    \n    // Transactions\n    Transaction(fn func(ORM) error) error\n    TransactionWithContext(ctx context.Context, fn func(ORM) error) error\n    \n    // Migrations\n    CreateTable(model interface{}) error\n    DropTable(model interface{}) error\n    Migrate() error\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repository",children:"Repository"}),"\n",(0,t.jsx)(n.h3,{id:"repository-1",children:(0,t.jsx)(n.code,{children:"Repository"})}),"\n",(0,t.jsx)(n.p,{children:"Interface pour les op\xe9rations CRUD."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type Repository interface {\n    // Op\xe9rations de lecture\n    Find(id interface{}) (interface{}, error)\n    FindAll() ([]interface{}, error)\n    FindBy(criteria map[string]interface{}) ([]interface{}, error)\n    FindOneBy(criteria map[string]interface{}) (interface{}, error)\n    \n    // Op\xe9rations d'\xe9criture\n    Save(entity interface{}) error\n    Update(entity interface{}) error\n    Delete(entity interface{}) error\n    \n    // Utilitaires\n    Count() (int64, error)\n    Exists(id interface{}) (bool, error)\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"query-builder",children:"Query Builder"}),"\n",(0,t.jsx)(n.h3,{id:"querybuilder",children:(0,t.jsx)(n.code,{children:"QueryBuilder"})}),"\n",(0,t.jsx)(n.p,{children:"Interface pour construire des requ\xeates SQL."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type QueryBuilder interface {\n    // S\xe9lection et table\n    Select(fields ...string) QueryBuilder\n    From(table string) QueryBuilder\n    \n    // Conditions WHERE\n    Where(field, operator string, value interface{}) QueryBuilder\n    WhereIn(field string, values []interface{}) QueryBuilder\n    WhereNotIn(field string, values []interface{}) QueryBuilder\n    WhereBetween(field string, min, max interface{}) QueryBuilder\n    WhereNotBetween(field string, min, max interface{}) QueryBuilder\n    WhereNull(field string) QueryBuilder\n    WhereNotNull(field string) QueryBuilder\n    WhereLike(field, pattern string) QueryBuilder\n    WhereNotLike(field, pattern string) QueryBuilder\n    WhereRegexp(field, pattern string) QueryBuilder\n    WhereNotRegexp(field, pattern string) QueryBuilder\n    \n    // Jointures\n    Join(table, condition string) QueryBuilder\n    LeftJoin(table, condition string) QueryBuilder\n    RightJoin(table, condition string) QueryBuilder\n    InnerJoin(table, condition string) QueryBuilder\n    \n    // Tri et groupement\n    OrderBy(field, direction string) QueryBuilder\n    GroupBy(fields ...string) QueryBuilder\n    Having(condition string, args ...interface{}) QueryBuilder\n    \n    // Pagination\n    Limit(limit int) QueryBuilder\n    Offset(offset int) QueryBuilder\n    \n    // Modificateurs\n    Distinct() QueryBuilder\n    ForUpdate() QueryBuilder\n    ForShare() QueryBuilder\n    \n    // Ex\xe9cution\n    Find() ([]map[string]interface{}, error)\n    FindOne() (map[string]interface{}, error)\n    Count() (int64, error)\n    Exists() (bool, error)\n    \n    // SQL brut\n    Raw(sql string, args ...interface{}) QueryBuilder\n    GetSQL() string\n    GetArgs() []interface{}\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"dialectes",children:"Dialectes"}),"\n",(0,t.jsx)(n.h3,{id:"dialect",children:(0,t.jsx)(n.code,{children:"Dialect"})}),"\n",(0,t.jsx)(n.p,{children:"Interface pour les dialectes de base de donn\xe9es."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type Dialect interface {\n    // Connexion\n    Connect(config ConnectionConfig) error\n    Close() error\n    Ping() error\n    \n    // Requ\xeates\n    Exec(query string, args ...interface{}) (sql.Result, error)\n    Query(query string, args ...interface{}) (*sql.Rows, error)\n    QueryRow(query string, args ...interface{}) *sql.Row\n    \n    // Transactions\n    Begin() (Transaction, error)\n    BeginTx(ctx context.Context, opts *sql.TxOptions) (Transaction, error)\n    \n    // Sch\xe9ma\n    CreateTable(tableName string, columns []Column) error\n    DropTable(tableName string) error\n    TableExists(tableName string) (bool, error)\n    \n    // Utilitaires\n    GetSQLType(goType reflect.Type) string\n    GetPlaceholder(index int) string\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"m\xe9tadonn\xe9es",children:"M\xe9tadonn\xe9es"}),"\n",(0,t.jsx)(n.h3,{id:"modelmetadata",children:(0,t.jsx)(n.code,{children:"ModelMetadata"})}),"\n",(0,t.jsx)(n.p,{children:"Structure des m\xe9tadonn\xe9es d'un mod\xe8le."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type ModelMetadata struct {\n    Type          reflect.Type\n    TableName     string\n    Columns       []Column\n    PrimaryKey    string\n    AutoIncrement string\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"column",children:(0,t.jsx)(n.code,{children:"Column"})}),"\n",(0,t.jsx)(n.p,{children:"Structure d'une colonne."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type Column struct {\n    Name          string\n    Type          string\n    Length        int\n    PrimaryKey    bool\n    AutoIncrement bool\n    Unique        bool\n    Index         bool\n    Nullable      bool\n    Default       interface{}\n    ForeignKey    *ForeignKey\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"foreignkey",children:(0,t.jsx)(n.code,{children:"ForeignKey"})}),"\n",(0,t.jsx)(n.p,{children:"Structure d'une cl\xe9 \xe9trang\xe8re."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type ForeignKey struct {\n    ReferencedTable  string\n    ReferencedColumn string\n    OnDelete         string\n    OnUpdate         string\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transactions",children:"Transactions"}),"\n",(0,t.jsx)(n.h3,{id:"transaction",children:(0,t.jsx)(n.code,{children:"Transaction"})}),"\n",(0,t.jsx)(n.p,{children:"Interface pour les transactions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type Transaction interface {\n    Commit() error\n    Rollback() error\n    Exec(query string, args ...interface{}) (sql.Result, error)\n    Query(query string, args ...interface{}) (*sql.Rows, error)\n    QueryRow(query string, args ...interface{}) *sql.Row\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exemples-dutilisation",children:"Exemples d'Utilisation"}),"\n",(0,t.jsx)(n.h3,{id:"configuration-et-connexion",children:"Configuration et Connexion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'cfg := builder.NewConfigBuilder().\n    WithDialect(factory.MySQL).\n    WithHost("localhost").\n    WithDatabase("test").\n    WithUsername("user").\n    WithPassword("pass").\n    Build()\n\norm := builder.NewSimpleORM().\n    WithConfigBuilder(cfg).\n    RegisterModel(&User{})\n\nif err := orm.Connect(); err != nil {\n    log.Fatal(err)\n}\ndefer orm.Close()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"op\xe9rations-crud",children:"Op\xe9rations CRUD"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'repo := orm.GetORM().Repository(&User{})\n\n// Create\nuser := &User{Name: "Alice"}\nerr := repo.Save(user)\n\n// Read\nfound, err := repo.Find(1)\n\n// Update\nuser.Name = "Bob"\nerr = repo.Update(user)\n\n// Delete\nerr = repo.Delete(user)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"query-builder-1",children:"Query Builder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'users, err := orm.Query(&User{}).\n    Select("name", "email").\n    Where("age", ">", 18).\n    OrderBy("name", "ASC").\n    Limit(10).\n    Find()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"transactions-1",children:"Transactions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'err := orm.GetORM().Transaction(func(tx ORM) error {\n    repo := tx.Repository(&User{})\n    user := &User{Name: "Alice"}\n    if err := repo.Save(user); err != nil {\n        return err // rollback\n    }\n    return nil // commit\n})\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var i=r(6540);const t={},o=i.createContext(t);function l(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);